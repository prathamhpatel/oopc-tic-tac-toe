#include <iostream>

using namespace std;

const int BOARD_SIZE = 3;

// Function to Boarday the Tic Tac Toe board
void BoardayBoard(char board[][BOARD_SIZE]) {
    cout << "-------------" << endl;
    for (int i = 0; i < BOARD_SIZE; ++i) {
        cout << "| ";
        for (int j = 0; j < BOARD_SIZE; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

// Function to check if the game is over (win or draw)
bool isGameOver(char board[][BOARD_SIZE], char symbol) {
    // Check rows and columns for a win
    for (int i = 0; i < BOARD_SIZE; ++i) {
        if (board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol)
            return true; // Row win
        if (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol)
            return true; // Column win
    }

  // Check diagonals for a win
if(board [0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol)
return true;//diagonal from top-right and bottom-left

if(board [0][2] == symbol && board[1]][1] == symbol && board[2][0] ==  symbol)
return true;//diagonal from top-right and bottom-left

// Check for a draw (full board with no winner)
    bool isFull = true;
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                isFull = false;
                break;
            }
        }
    }
    return isFull;
}
// Function to handle player's move
void playerMove(char board[][BOARD_SIZE], char symbol) {
    int row, col;
    cout << "Player '" << symbol << "', enter your move (row and column): ";
    cin >> row >> col;

    // Validate the input and update the board
    if (row >= 0 && row < BOARD_SIZE && col >= 0 && col < BOARD_SIZE && board[row][col] == ' ') {
        board[row][col] = symbol;
    } else {
        cout << "Invalid move. Try again." << endl;
        playerMove(board, symbol); // Recursively retry until a valid move is made
    }
} 
int main() {
    char board[BOARD_SIZE][BOARD_SIZE];

    // Initialize the board
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            board[i][j] = ' '; // Use space to indicate empty cell
        }
    }

    char currentPlayer = 'X'; // Player 'X' starts first
   // Game loop
    while (true) {
        displayBoard(board);

        // Player's move
        playerMove(board, currentPlayer);

        // Check if the game is over
        if (isGameOver(board, currentPlayer)) {
            displayBoard(board);
            cout << "Player '" << currentPlayer << "' wins!" << endl;
            break; // Exit the game loop
        }

        // Switch player
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}


